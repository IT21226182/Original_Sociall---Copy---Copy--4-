import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate, useParams } from "react-router-dom";
import SocialHeader from './SocialHeader';
import downloadImg from './images/sback.jpg';

// Voice recognition setup
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = new SpeechRecognition();
recognition.interimResults = false;

export default function Questionnaire() {
  const [q1, setQ1] = useState("");
  const [q2, setQ2] = useState("");
  const [q3, setQ3] = useState("");
  const [q4, setQ4] = useState("");
  const [q5, setQ5] = useState("");
  const [q6, setQ6] = useState("");
  const [q7, setQ7] = useState("");
  const [q8, setQ8] = useState("");
  const [q9, setQ9] = useState("");
  const [q10, setQ10] = useState("");

  const [listening, setListening] = useState(null);
  const [result, setResult] = useState(""); // State to store the risk prediction result
  const [showPopup, setShowPopup] = useState(false); // State to control popup visibility

  const { lang } = useParams();
  const [translatedLabels, setTranslatedLabels] = useState({});
  const navigate = useNavigate();

  // Translations
  useEffect(() => {
    const translations = {
      english: {
        title: "Evaluation Form",
        q1: "1. Does your child make eye contact during conversations or interactions with family members or visitors?",
        q2: "2. Does your child get scared or react strongly to common household noises, such as grinding machines or temple/church bells?",
        q3: "3. Does your child prefer playing alone rather than joining other children in activities?",
        q4: "4. Does your child repeat words or phrases that seem out of context, like TV dialogues or songs?",
        q5: "5. Can your child understand simple instructions given, such as 'Give the book to Amma' or 'Bring your slippers'?",
        q6: "6. How does your child react when you call him/her by name during daily activities, such as at meal times or play?",
        q7: "7. How does your child behave in crowded places like markets, bus stands, or festivals?",
        q8: "8. How does your child let you know when he/she is hungry, thirsty, or wants something specific?",
        q9: "9. What does your child usually do when he/she is playing with objects like toys or household items?",
        q10: "10. How does your child react when asked to do something new or unfamiliar at home?",
        yes: "Yes",
        no: "No",
        speak: "ЁЯФК Use your voice",
        submit: "Submit",
        resultMessage: "Risk Prediction:",
        close: "Close",
      },
      sinhala: {
        title: "р╢Зр╢Ьр╢║р╖Фр╢╕р╖К р╢┤р╖Эр╢╗р╢╕р╢║",
        q1: "1. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢┤р╖Ар╖Фр╢╜р╖Ъ р╖Гр╖Пр╢╕р╖Пр╢вр╖Тр╢Ър╢║р╢▒р╖К р╖Др╖Э р╢Ер╢╕р╖Фр╢нр╖Кр╢нр╢▒р╖К р╖Гр╢╕р╢Я р╖Гр╢Вр╖Ар╖Пр╢п р╖Др╖Э р╢Ер╢▒р╖Кр╢нр╢╗р╖К р╢Ър╖КтАНр╢╗р╖Тр╢║р╖П р╖Ар╢╜р╢пр╖У р╢Зр╖Г р╢пр╖Щр╖Г р╢╢р╢╜р╖П р╢Ър╢нр╖П р╢Ър╢╗р╢▒р╖Ар╖Пр╢п?",
        q2: "2. р╢Зр╢╣р╢╗р╖Фр╢╕р╖К р╢║р╢▒р╖Кр╢нр╖КтАНр╢╗ р╖Др╖Э р╢┤р╢▒р╖Кр╖Гр╢╜р╖К/р╢┤р╢╜р╖Кр╢╜р╖Т р╖Гр╖Ур╢▒р╖Ф р╖Ар╖Рр╢▒р╖Т р╖Гр╖Пр╢╕р╖Пр╢▒р╖КтАНр╢║ р╢Ьр╖Шр╖Др╖Гр╖Кр╢о р╖Бр╢╢р╖Кр╢пр╖Ар╢╜р╢з р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢╢р╖Тр╢║р╢з р╢┤р╢нр╖К р╖Ар╢▒р╖Кр╢▒р╖Ър╢п р╢▒р╖Рр╢нр╖Др╖Ьр╢нр╖К р╢пр╖Рр╢йр╖Т р╢╜р╖Щр╖Г р╢┤р╖КтАНр╢╗р╢нр╖Тр╢ар╖Пр╢╗ р╢пр╢Ър╖Кр╖Ар╢▒р╖Ар╖Пр╢п?",
        q3: "3. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╖Ар╖Щр╢▒р╢нр╖К р╢пр╢╗р╖Фр╖Ар╢▒р╖К р╖Гр╢╕р╢Я р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╢Ър╢╕р╖Кр╖Ар╢╜р╢з р╖Гр╢╕р╖Кр╢╢р╢▒р╖Кр╢░ р╖Ар╖Щр╢▒р╖Ар╖Пр╢з р╖Ар╢йр╖П р╢нр╢▒р╖Тр╖Ар╢╕ р╖Гр╖Щр╢╜р╖Кр╢╜р╢╕р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Ър╖Рр╢╕р╢нр╖Тр╢п?",
        q4: "4. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢╗р╖Цр╢┤р╖Ар╖Пр╖Др╖Тр╢▒р╖У р╖Гр╢Вр╖Ар╖Пр╢п р╖Др╖Э р╢Ьр╖Ур╢н р╖Ар╖Рр╢▒р╖Т р╖Гр╢▒р╖Кр╢пр╢╗р╖Кр╢╖р╢║р╖Щр╢▒р╖К р╢╢р╖Рр╖Др╖Рр╢╗р╖А р╢┤р╖Щр╢▒р╖Щр╢▒ р╖Ар╢ар╢▒ р╖Др╖Э р╖Ар╖Пр╢Ър╖КтАНр╢║ р╢Ыр╢лр╖Кр╢й р╢▒р╖Рр╖Ар╢н р╢▒р╖Рр╖Ар╢н р╢Ър╖Тр╢║р╢▒р╖Ар╖Пр╢п?",
        q5: "5. 'р╢Ер╢╕р╖Кр╢╕р╖Пр╢з р╢┤р╖Ьр╢н р╢пр╖Щр╢▒р╖Кр╢▒' р╖Др╖Э 'р╢Фр╢╢р╖Ъ р╖Гр╖Щр╢╗р╖Щр╢┤р╖Кр╢┤р╖Ф р╢╗р╖Рр╢Ьр╖Щр╢▒ р╢Ср╢▒р╖Кр╢▒' р╖Ар╖Рр╢▒р╖Т р╖Гр╢╗р╢╜ р╢Лр╢┤р╢пр╖Щр╖Гр╖К р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖Пр╢з р╢нр╖Ър╢╗р╖Фр╢╕р╖К р╢Ьр╢н р╖Др╖Рр╢Ър╖Тр╢п?",
        q6: "6. р╢Жр╖Др╖Пр╢╗ р╖Ар╖Ър╢╜р╖Щр╖Др╖Т р╖Др╖Э р╢Ър╖КтАНр╢╗р╖Ур╢йр╖П р╢Ър╢╗р╢▒ р╖Ар╖Тр╢з р╖Ар╖Рр╢▒р╖Т р╢пр╖Ыр╢▒р╖Тр╢Ъ р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╢Ър╢╕р╖К р╖Ар╢╜р╢пр╖У р╢Фр╢╢ р╢Фр╖Др╖Фр╢з/р╢Зр╢║р╢з р╢▒р╢╕р╖Тр╢▒р╖К р╢Ър╢нр╖П р╢Ър╢╗р╢▒ р╖Ар╖Тр╢з р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢┤р╖КтАНр╢╗р╢нр╖Тр╢ар╖Пр╢╗ р╢пр╢Ър╖Кр╖Ар╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?",
        q7: "7. р╢┤р╖Ьр╖Ер╖Ар╢╜р╖К, р╢╢р╖Гр╖К р╢▒р╖Рр╖Ар╢нр╖Фр╢╕р╖К р╢┤р╖Ьр╖Ер╖Ар╢╜р╖К р╖Др╖Э р╢Лр╢нр╖Кр╖Гр╖А р╖Ар╖Рр╢▒р╖Т р╢вр╢▒р╖Пр╢Ър╖Ур╢╗р╖Кр╢л р╖Гр╖Кр╢ор╖Пр╢▒р╖Ар╢╜ р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╖Др╖Рр╖Гр╖Тр╢╗р╖Щр╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?",
        q8: "8. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢Фр╖Др╖Фр╢з/р╢Зр╢║р╢з р╢╢р╢йр╢Ьр╖Тр╢▒р╖Т, р╢┤р╖Тр╢┤р╖Пр╖Гр╢║, р╖Др╖Э р╢▒р╖Тр╖Бр╖Кр╢ар╖Тр╢н р╢║р╢╕р╢Ър╖К р╢Ер╖Ар╖Бр╖КтАНр╢║ р╖Ар╖Ц р╖Ар╖Тр╢з р╢Фр╖Др╖Ф р╢Фр╢╢р╢з р╢пр╢▒р╖Кр╖Ар╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?",
        q9: "9. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╖Гр╖Щр╢╜р╖Кр╢╜р╢╕р╖К р╢╢р╢йр╖Ф р╖Др╖Э р╢Ьр╖Шр╖Д р╢╖р╖Пр╢лр╖Кр╢й р╖Ар╖Рр╢▒р╖Т р╖Ар╖Гр╖Кр╢нр╖Цр╢▒р╖К р╖Гр╢╕р╢Я р╖Гр╖Щр╢╜р╖Кр╢╜р╢╕р╖К р╢Ър╢╗р╢▒ р╖Ар╖Тр╢з р╢Фр╖Др╖Ф/р╢Зр╢║ р╖Гр╖Пр╢╕р╖Пр╢▒р╖Кр╢║р╢║р╖Щр╢▒р╖К р╢Ър╢╗р╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Фр╢╕р╢Ър╖Кр╢п?",
        q10: "10. р╢▒р╖Тр╖Ар╖Гр╖Ър╢пр╖У р╢Ер╢╜р╖Фр╢нр╖К р╖Др╖Э р╢▒р╖Фр╖Др╖Фр╢╗р╖Ф р╢пр╖Щр╢║р╢Ър╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢┤р╖КтАНр╢╗р╢нр╖Тр╢ар╖Пр╢╗р╢║ р╢пр╢Ър╖Кр╖Ар╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?",
        yes: "р╢Фр╖Ар╖К",
        no: "р╢▒р╖Рр╢н",
        speak: "ЁЯФК р╖Др╢м р╢╖р╖Пр╖Ар╖Тр╢нр╢║",
        submit: "р╢Йр╢пр╖Тр╢╗р╖Тр╢║р╢з р╢║р╢▒р╖Кр╢▒",
        resultMessage: "р╢Ер╖Ар╢пр╖Пр╢▒р╢╕р╖К р╢Ер╢▒р╖Пр╖Ар╖Рр╢Ър╖Тр╢║:",
        close: "р╖Ар╖Гр╢▒р╖Кр╢▒",
      },
      tamil: {
        title: "роХрпБро┤роирпНродрпИ родройро┐родрпНродрпБро╡роорпН роородро┐рокрпНрокрпАроЯрпБ",
        q1: "1. роХрпБроЯрпБроорпНрок роЙро▒рпБрокрпНрокро┐ройро░рпНроХро│рпН роЕро▓рпНро▓родрпБ рокро╛ро░рпНро╡рпИропро╛ро│ро░рпНроХро│рпБроЯройро╛рой роЙро░рпИропро╛роЯро▓рпНроХро│рпН роЕро▓рпНро▓родрпБ родрпКроЯро░рпНрокрпБроХро│ро┐ройрпН рокрпЛродрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роХрогрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНроХро┐ро▒родро╛?",
        q2: "2. роЕро░рпИроХрпНроХрпБроорпН роЗропроирпНродро┐ро░роЩрпНроХро│рпН роЕро▓рпНро▓родрпБ роХрпЛро╡ро┐ро▓рпН/родрпЗро╡ро╛ро▓роп роорогро┐ рокрпЛройрпНро▒ рокрпКродрпБро╡ро╛рой ро╡рпАроЯрпНроЯрпБроЪрпН роЪродрпНродроЩрпНроХро│рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ рокропрокрпНрокроЯрпБроХро┐ро▒родро╛ роЕро▓рпНро▓родрпБ роХроЯрпБроорпИропро╛роХ роОродро┐ро░рпНро╡ро┐ройрпИропро╛ро▒рпНро▒рпБроХро┐ро▒родро╛?",
        q3: "3. роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ рооро▒рпНро▒ роХрпБро┤роирпНродрпИроХро│рпБроЯройрпН роЪрпЗро░рпНроирпНродрпБ ро╡ро┐ро│рпИропро╛роЯрпБро╡родрпИ ро╡ро┐роЯ родройро┐ропро╛роХ ро╡ро┐ро│рпИропро╛роЯрпБро╡родрпИ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒родро╛?",
        q4: "4. роЯро┐ро╡ро┐ роЙро░рпИропро╛роЯро▓рпНроХро│рпН роЕро▓рпНро▓родрпБ рокро╛роЯро▓рпНроХро│рпН рокрпЛройрпНро▒ роЪрпВро┤ро▓рпБроХрпНроХрпБ роЕрокрпНрокро╛ро▒рпНрокроЯрпНроЯ ро╡ро╛ро░рпНродрпНродрпИроХро│рпН роЕро▓рпНро▓родрпБ роЪрпКро▒рпНро▒рпКроЯро░рпНроХро│рпИ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНроХро┐ро▒ро╛ро░ро╛?",
        q5: "5. 'рокрпБродрпНродроХродрпНродрпИ роЕроорпНрооро╛ро╡ро┐роЯроорпН роХрпКроЯрпБ' роЕро▓рпНро▓родрпБ 'роЙроЩрпНроХро│рпН роЪрпЖро░рпБрокрпНрокрпБроХро│рпИроХрпН роХрпКрогрпНроЯрпБ ро╡ро╛ро░рпБроЩрпНроХро│рпН' рокрпЛройрпНро▒ роОро│ро┐роп ро╡ро┤ро┐роорпБро▒рпИроХро│рпИ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропрпБрооро╛?",
        q6: "6. роЙрогро╡ро┐ройрпН рокрпЛродрпБ роЕро▓рпНро▓родрпБ ро╡ро┐ро│рпИропро╛роЯрпБроорпН рокрпЛродрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роЙроЩрпНроХро│рпН рокрпЖропро░рпИроЪрпН роЪрпКро▓рпНро▓ро┐ роЕро┤рпИроХрпНроХрпБроорпН рокрпЛродрпБ роЕро╡ро░рпН роОро╡рпНро╡ро╛ро▒рпБ рокродро┐ро▓ро│ро┐рокрпНрокро╛ро░рпН?",
        q7: "7. роЪроирпНродрпИроХро│рпН, рокрпЗро░рпБроирпНродрпБ роиро┐ро▓рпИропроЩрпНроХро│рпН роЕро▓рпНро▓родрпБ родро┐ро░рпБро╡ро┐ро┤ро╛роХрпНроХро│рпН рокрпЛройрпНро▒ роирпЖро░ро┐роЪро▓ро╛рой роЗроЯроЩрпНроХро│ро┐ро▓рпН роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роОрокрпНрокроЯро┐ роироЯроирпНродрпБ роХрпКро│рпНроХро┐ро▒родрпБ?",
        q8: "8. роЙроЩрпНроХро│рпН рокро┐ро│рпНро│рпИ рокроЪро┐ропро╛роХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ, тАЛтАЛродро╛роХрооро╛роХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ роЕро▓рпНро▓родрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роТройрпНро▒рпИ ро╡ро┐ро░рпБроорпНрокрпБроорпНрокрпЛродрпБ роОрокрпНрокроЯро┐ роЙроЩрпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐ропрокрпНрокроЯрпБродрпНродрпБро╡ро╛ро░рпН?",
        q9: "9. роЙроЩрпНроХро│рпН рокро┐ро│рпНро│рпИ рокрпКроорпНроорпИроХро│рпН роЕро▓рпНро▓родрпБ ро╡рпАроЯрпНроЯрпБрокрпН рокрпКро░рпБроЯрпНроХро│рпН рокрпЛройрпНро▒ рокрпКро░рпБроЯрпНроХро│рпИ ро╡рпИродрпНродрпБ ро╡ро┐ро│рпИропро╛роЯрпБроорпНрокрпЛродрпБ рокрпКродрпБро╡ро╛роХ роОройрпНрой роЪрпЖропрпНро╡ро╛ро░рпН?",
        q10: "10. ро╡рпАроЯрпНроЯро┐ро▓рпН рокрпБродро┐роп роЕро▓рпНро▓родрпБ роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роТройрпНро▒рпИ роЪрпЖропрпНропрпБроорпНрокроЯро┐ роХрпЗроЯрпНроХрокрпНрокроЯрпБроорпН рокрпЛродрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роОро╡рпНро╡ро╛ро▒рпБ рокродро┐ро▓ро│ро┐роХрпНроХро┐ро▒ро╛ро░рпН?",
        yes: "роЖроорпН",
        no: "роЗро▓рпНро▓рпИ",
        speak: "ЁЯФК роХрпБро░ро▓рпН рокропройрпНрокроЯрпБродрпНрод",
        submit: "роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН",
        resultMessage: "роЕрокро╛ропроорпН роХрогро┐рокрпНрокрпБ:",
        close: "роорпВроЯрпБ",
      },
    };

    setTranslatedLabels(translations[lang]);
    document.title = translations[lang]?.title || "Autism Risk Assessment";
  }, [lang]);

  // Speech recognition
  function startListening(field) {
    setListening(field);

    if (lang === "sinhala") recognition.lang = "si-LK";
    else if (lang === "tamil") recognition.lang = "ta-LK";
    else recognition.lang = "en-US";

    recognition.start();
  }

  recognition.onresult = (event) => {
    const spokenText = event.results[0][0].transcript;

    if (listening === "q6") setQ6(spokenText);
    if (listening === "q7") setQ7(spokenText);
    if (listening === "q8") setQ8(spokenText);
    if (listening === "q9") setQ9(spokenText);
    if (listening === "q10") setQ10(spokenText);

    setListening(null);
  };

  recognition.onspeechend = () => recognition.stop();

  // Submit form
  async function handleSubmit(e) {
    e.preventDefault();

    const newSales = { q1, q2, q3, q4, q5, q6, q7, q8, q9, q10 };

    try {
      // Save the form data to the database
      await axios.post("http://localhost:8070/Sroute/add", newSales);

      // Prepare data for risk prediction
      const yesNoAnswers = [q1, q2, q3, q4, q5].map((answer) => (answer === "yes" ? 1 : 0));
      const openEndedResponses = [q6, q7, q8, q9, q10];

      // Get sentiment results from Flask
      const sentimentResponse = await axios.post("http://localhost:5000/sentiment", {
        responses: openEndedResponses,
      });
      const sentimentResults = sentimentResponse.data.sentiments;

      // Get risk prediction from Flask
      const riskResponse = await axios.post("http://localhost:5000/risk-prediction", {
        yes_no_answers: yesNoAnswers,
        sentiment_results: sentimentResults,
      });
      const riskPrediction = riskResponse.data.risk_prediction;

      // Set the result state and show the popup
      setResult(riskPrediction === 1 ? "Risk Detected" : "No Risk Detected");
      setShowPopup(true); // Show the popup
    } catch (err) {
      alert("Error submitting the form: " + err.message);
    }
  }

  // Close the popup
  const closePopup = () => {
    setShowPopup(false);
  };

  // Styles
  const containerStyle = {
    padding: "20px",
    backgroundColor: "#E8EFF4",
    overflow: "hidden",
    boxShadow: "0 2px 20px",
    borderRadius: "$radius",
    transition: "transform 200ms ease-in",
    padding: "20px",
    backdropFilter: "blur(50px)",
    maxWidth: "1000px",
    margin: "0 auto",
    marginTop: "50px",
    flexDirection: "column",
    alignItems: "center",
  };
  const labelStyle = {
    marginBottom: "8px",
    display: "block",
    color: "#1C325B",
    fontWeight: "bold",
  };
  const inputStyle = {
    width: "100%",
    marginBottom: "15px",
    padding: "12px",
    border: "1px solid #ccc",
    borderRadius: "5px",
    fontSize: "16px",
    boxSizing: "border-box",
  };
  const buttonStyle = {
    backgroundImage: "linear-gradient(125deg,#1C325B,#4A628A)",
    color: "#fff",
    padding: "12px 20px",
    borderRadius: "5px",
    border: "none",
    cursor: "pointer",
    fontSize: "16px",
    width: "20%",
    marginTop: "15px",
    marginLeft: "auto",
    display: "block",
  };
  const speakButtonStyle = {
    backgroundColor: "transparent",
    padding: "10px 20px",
    borderRadius: "5px",
    border: "none",
    cursor: "pointer",
    fontSize: "16px",
    marginTop: "10px",
    outline: "none",
    boxShadow: "none",
  };

  // Define lastFieldStyle
  const lastFieldStyle = {
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-start",
    width: "100%",
    marginBottom: "20px",
  };

  // Popup styles
  const popupStyle = {
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    backgroundColor: "#fff",
    padding: "20px",
    borderRadius: "10px",
    boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
    zIndex: 1000,
    textAlign: "center",
  };
  const overlayStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    zIndex: 999,
  };

  return (
    <>
      <div
        style={{
          backgroundImage: `url(${downloadImg})`,
          backgroundRepeat: "no-repeat",
          backgroundSize: "cover",
          width: "100vw",
          height: "300vh",
        }}
      >
        <SocialHeader />
        <h3 style={{ textAlign: "center", fontWeight: "10px" }}>{translatedLabels.title}</h3>
        <form onSubmit={handleSubmit} style={containerStyle}>
          {[...Array(5).keys()].map((i) => (
            <div key={i} style={{ width: "100%" }}>
              <label style={labelStyle}>{translatedLabels[`q${i + 1}`]}</label>
              <select
                value={eval(`q${i + 1}`)}
                onChange={(e) => eval(`setQ${i + 1}(e.target.value)`)}
                style={inputStyle}
              >
                <option value="">{translatedLabels.yes}/{translatedLabels.no}</option>
                <option value="yes">{translatedLabels.yes}</option>
                <option value="no">{translatedLabels.no}</option>
              </select>
            </div>
          ))}

          {[...Array(5).keys()].map((i) => (
            <div key={i + 5} style={lastFieldStyle}>
              <label style={labelStyle}>{translatedLabels[`q${i + 6}`]}</label>
              <textarea
                value={eval(`q${i + 6}`)}
                onChange={(e) => eval(`setQ${i + 6}(e.target.value)`)}
                style={inputStyle}
                rows="2"
              />
              <button
                type="button"
                onClick={() => startListening(`q${i + 6}`)}
                style={speakButtonStyle}
              >
                {translatedLabels.speak}
              </button>
            </div>
          ))}
          <button type="submit" style={buttonStyle}>
            {translatedLabels.submit}
          </button>
        </form>

        {/* Popup for risk prediction result */}
        {showPopup && (
          <>
            <div style={overlayStyle} onClick={closePopup}></div>
            <div style={popupStyle}>
              <h3>{translatedLabels.resultMessage}</h3>
              <p>{result}</p>
              <button onClick={closePopup} style={buttonStyle}>
                {translatedLabels.close}
              </button>
            </div>
          </>
        )}
      </div>
    </>
  );
}